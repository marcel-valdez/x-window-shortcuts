#!/usr/bin/env bash

# Set DEBUG to 1 to anything in order to show notification messages
SIZES=(1 0.73 0.666 0.5 0.334 0.27)
X_SIDE_BORDER=0

function log_error() {
  echo "$@" >&2
}

function log_debug() {

  if [[ -z "${DEBUG}" ]]; then
    return 0
  fi

  local title="x-window-move"
  local message="$*"
  if [[ "${TERMINAL_DEBUG}" ]]; then
    echo "${message}" >&2
  else
    notify-send "${title}" "${message}"
  fi
}

function to_int() {
  local value="$1"
  echo "${value%.*}"
}

if [ "${XDOTOOL}" == "" ]; then
  XDOTOOL="/usr/bin/xdotool"
fi

if [ ! -f "${XDOTOOL}" ]; then
  log_error "You must install xdotool for the shortcuts to work" >&2
  exit 1
fi

if [ "${XRANDR}" == "" ]; then
  XRANDR="/usr/bin/xrandr"
fi

if [ ! -f "${XRANDR}" ]; then
  log_error "You must install xrandr for the shortcuts to work" >&2
  exit 1
fi


if [ "${XPROP}" == "" ]; then
  XPROP=/usr/bin/xprop
fi

if [ ! -f "${XPROP}" ]; then
  log_error "You must install xprop for the shortcuts to work" >&2
  exit 1
fi

if [ "${WMCTRL}" == "" ]; then
  WMCTRL=/usr/bin/wmctrl
fi

if [ ! -f "${WMCTRL}" == "" ]; then
  log_error "You must install wmctrl for the shortcuts to work" >&2
  exit 1
fi

function get_active_window_prop() {
  ${XDOTOOL} getactivewindow getwindowgeometry --shell | grep -oP "(?<=$1=).*"
}

function is_active_window_maximized() {
  local focused_window_id=$(${XDOTOOL} getactivewindow)
  if [ -z "${focused_window_id}" ]; then
    log_error "Failed to get active window id."
    exit 1
  fi

  local window_states=$(xprop -id "${focused_window_id}" "_NET_WM_STATE")
  echo "${window_states}" | grep -q "_NET_WM_STATE_MAXIMIZED_HORZ" && \
    echo "${window_states}" | grep -q "_NET_WM_STATE_MAXIMIZED_VERT"
}

function is_active_window_maximized_vertically() {
  local focused_window_id=$(${XDOTOOL} getactivewindow)
  if [ -z "${focused_window_id}" ]; then
    log_error "Failed to get active window id."
    exit 1
  fi

  local window_states=$(xprop -id "${focused_window_id}" _NET_WM_STATE)
    echo "${window_states}" | grep -q "_NET_WM_STATE_MAXIMIZED_VERT"
}

function is_active_window_maximized_horizontally() {
  local focused_window_id=$(${XDOTOOL} getactivewindow)
  if [ -z "${focused_window_id}" ]; then
    log_error "Failed to get active window id."
    exit 1
  fi

  local window_states=$(xprop -id "${focused_window_id}" "_NET_WM_STATE")
    echo "${window_states}" | grep -q "_NET_WM_STATE_MAXIMIZED_HORZ"
}

function get_selected_screen_dimensions() {
  local selection_char="$1"
  ${XRANDR} --current \
    | grep "${selection_char}" \
    | grep -Eo "[0-9]+\s*x\s*[0-9]+" \
    | head -1
}

function setup_screen_dimensions() {
  if [ "${SCREEN_DIMENSIONS}" == "" ]; then
    # NOTE: assumes that both screen are of the same size
    SCREEN_DIMENSIONS=$(get_selected_screen_dimensions '*')
    # RATIONALE: If the current size is not shown as selected by an '*', then
    # use the size that is selected by a '+'.
    if [[ "${SCREEN_DIMENSIONS}" == "" ]]; then
      SCREEN_DIMENSIONS=$(get_selected_screen_dimensions '+')
    fi
    log_debug "setup_screen_dimensions: ${SCREEN_DIMENSIONS}"
    SCREEN_WIDTH=$(echo ${SCREEN_DIMENSIONS} | cut -d'x' -f1)
    SCREEN_HEIGHT=$(echo ${SCREEN_DIMENSIONS} | cut -d'x' -f2)
    log_debug "setup_screen_dimensions: screen width: ${SCREEN_WIDTH}, \
screen height: ${SCREEN_HEIGHT}"
  fi
}

function get_screen_width() {
  setup_screen_dimensions
  local multiplier=$1
  if [ "${multiplier}" == "" ]; then
    multiplier=1.0
  fi

  to_int $(expr "${SCREEN_WIDTH} * ${multiplier}" | bc)
}

function get_screen_height() {
  setup_screen_dimensions
  local multiplier=$1
  if [ -z "${multiplier}" ]; then
    multiplier=1.0
  fi

  to_int $(echo "${SCREEN_HEIGHT} * ${multiplier}" | bc)
}

function get_new_width() {
  setup_screen_dimensions

  local i=0
  local next_size="${SIZES[-1]}"
  local next_idx=
  while [[ ${i} -lt ${#SIZES[@]} ]]; do
    local size=$(to_int $(get_screen_width "${SIZES[${i}]}"))
    if [ ${window_width} -le ${size} ]; then
      if [[ "${reverse}" ]]; then
        next_idx=$(((i+1)%5))
      else
        next_idx=$((i-1))
      fi
      next_size="${SIZES[${next_idx}]}"
    fi
    i=$((i+1))
  done

  get_screen_width "${next_size}"
}

function get_new_height() {
  setup_screen_dimensions
  local i=0
  local next_size="${SIZES[-1]}"
  local next_idx=
  while [[ ${i} -lt ${#SIZES[@]} ]]; do
    local size=$(to_int $(get_screen_height "${SIZES[${i}]}"))
    if [ ${window_height} -le ${size} ]; then
      if [[ "${reverse}" ]]; then
        local next_idx=$(((i+1)%5))
      else
        local next_idx=$((i-1))
      fi
      next_size="${SIZES[${next_idx}]}"
    fi
    i=$((i+1))
  done

  get_screen_height "${next_size}"
}

function get_window_y_corrected() {
  curr_y=$(get_active_window_prop Y)
  if [ $curr_y -lt 100 ]; then
    curr_y=0
  fi
}

function move_window() {
  local x=$1
  local y=$2
  log_debug "${XDOTOOL} getactivewindow windowmove ${x} ${y}"
  ${XDOTOOL} getactivewindow windowmove ${x} ${y}
}

function resize_window() {
  setup_screen_dimensions
  local width=$1
  local height=$2
  log_debug "${XDOTOOL} getactivewindow windowsize ${width} ${height}"
  local screen_width=$(get_screen_width)
  local screen_height=$(get_screen_height)

  if [[ ${width} -eq ${screen_width} ]]; then
    maximize_horizontally
  fi

  if [[ ${height} -eq ${screen_height} ]]; then
    maximize_vertically
  fi

  ${XDOTOOL} getactivewindow windowsize ${width} ${height}
}

function minimize_window() {
  log_debug "${XDOTOOL} getactivewindow windowminimize"
  ${XDOTOOL} getactivewindow windowminimize
}

function maximize_vertically() {
  ${WMCTRL} -r :ACTIVE: -b add,maximized_vert
}

function maximize_horizontally() {
  ${WMCTRL} -r :ACTIVE: -b add,maximized_horz
}

function unmaximize_vertically() {
  ${WMCTRL} -r :ACTIVE: -b remove,maximized_vert
}

function unmaximize_horizontally() {
  ${WMCTRL} -r :ACTIVE: -b remove,maximized_horz
}

function maximize_window() {
  if [[ "${toggle}" ]]; then
    if is_active_window_maximized; then
      ${WMCTRL} -r :ACTIVE: -b remove,maximized_vert,maximized_horz
    else
      ${WMCTRL} -r :ACTIVE: -b add,maximized_vert,maximized_horz
    fi
  else
    ${WMCTRL} -r :ACTIVE: -b add,maximized_vert,maximized_horz
  fi
}

reverse=
command=
toggle=
function parse_args() {
  while [[ $# -gt 0 ]]; do
    local arg="$1"
    case "${arg}" in
      --reverse)
        reverse=1
        ;;
      --toggle)
        toggle=1
        ;;
      *)
        command="${arg}"
        ;;
    esac
    shift
  done
}


function main() {
  setup_screen_dimensions
  window_width=$(get_active_window_prop "WIDTH")
  window_height=$(get_active_window_prop "HEIGHT")
  absolute_x=$(get_active_window_prop "X")
  window_y=$(get_active_window_prop "Y")
  if [ ${absolute_x} -ge ${SCREEN_WIDTH} ]; then
    X_ORIGIN=${SCREEN_WIDTH}
    relative_x=$(expr ${absolute_x} - ${X_ORIGIN})
  else
    X_ORIGIN=0
    relative_x=${absolute_x}
  fi

  # NOTE: This fixes the issue when moving a window to the edge does not actually
  # put it in x=0, because of the window manager
  if [ ${relative_x} -lt 50 ]; then
    relative_x=0
  fi



  case "${command}" in
    left)
      if [ ${relative_x} -gt 50 ]; then
        new_width=$(get_screen_width 0.5)
      else
        new_width=$(get_new_width)
      fi

      new_x=${X_ORIGIN}
      log_debug "moving window to the left"
      if is_active_window_maximized; then
        unmaximize_horizontally
      fi
      resize_window ${new_width} ${window_height}
      move_window ${new_x} ${window_y}
      ;;

    right)
      if [ ${relative_x} -lt 50 ]; then
        new_width=$(get_screen_width 0.5)
      else
        new_width=$(get_new_width)
      fi
      new_x=$(expr ${X_ORIGIN} + ${SCREEN_WIDTH} - ${new_width} - ${X_SIDE_BORDER})
      log_debug "moving window to the right"
      if is_active_window_maximized; then
        unmaximize_horizontally
      fi
      resize_window ${new_width} ${window_height}
      move_window ${new_x} ${window_y}
      ;;

    up)
      if [[ ${window_y} -gt 0 ]]; then
        new_height=$(to_int $(get_screen_height "0.5"))
      else
        new_height=$(get_new_height)
      fi
      log_debug "moving the window up"
      if is_active_window_maximized; then
        unmaximize_vertically
      fi
      resize_window ${window_width} ${new_height}
      move_window $(expr ${X_ORIGIN} + ${relative_x}) 0
      ;;

    down)
      if [[ ${window_y} -eq 0 ]] && ! [[ ${window_height} -eq ${SCREEN_HEIGHT} ]]; then
        new_height=$(to_int $(get_screen_height "0.5"))
      else
        new_height=$(get_new_height)
      fi
      new_y=$(expr $(get_screen_height) - ${new_height})
      log_debug "moving the window down"
      if is_active_window_maximized; then
        unmaximize_vertically
      fi
      resize_window ${window_width} ${new_height}
      move_window $(expr ${X_ORIGIN} + ${relative_x}) ${new_y}
      ;;

    maximize)
      log_debug "maximizing the window"
      maximize_window
      ;;

    minimize)
      log_debug "minimizing the window"
      minimize_window
      ;;

    right-screen)
      # NOTE: Assumes both screens are the same size
      if [ ${absolute_x} -lt ${SCREEN_WIDTH} ]; then
        get_window_y_corrected
        new_x=$(expr ${absolute_x} + ${SCREEN_WIDTH})
        if [[ ${relative_x} -gt $((SCREEN_WDITH * 27 / 100)) ]]; then
          new_x=$((new_x - X_SIDE_BORDER))
        fi
        toggled_maximization=
        if is_active_window_maximized; then
          # toggle the maximization state
          toggle=1
          maximize_window
          toggled_maximization=1
        fi
        move_window ${new_x} ${curr_y}
        if [[ ${toggled_maximization} ]]; then
          maximize_window
        fi
      fi
      ;;

    left-screen)
      # NOTE: Assumes both screens are the same size
      if [ ${absolute_x} -ge $((SCREEN_WIDTH - X_SIDE_BORDER)) ]; then
        get_window_y_corrected
        new_x=$(expr ${absolute_x} - ${SCREEN_WIDTH})
        if [[ ${absolute_x} -gt $((SCREEN_WIDTH * 127 / 100)) ]]; then
          new_x=$((new_x - X_SIDE_BORDER))
        fi
        toggled_maximization=
        if is_active_window_maximized; then
          # toggle the maximization state
          toggle=1
          maximize_window
          toggled_maximization=1
        fi
        move_window ${new_x}  ${curr_y}
        if [[ ${toggled_maximization} ]]; then
          maximize_window
        fi
      fi
      ;;
    *)
      echo "Unknown command: ${command}" >&2
      exit 1
      ;;
  esac
}


parse_args "$@"
main
