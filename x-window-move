#!/usr/bin/env bash


if [ "$XDOTOOL" == "" ]; then
  XDOTOOL="/usr/bin/xdotool"
fi

if [ ! -f "$XDOTOOL" ]; then
  echo "You must install xdotool for the shortcuts to work"
  exit 1
fi

if [ "$XRANDR" == "" ]; then
  XRANDR="/usr/bin/xrandr"
fi

if [ ! -f "$XRANDR" ]; then
  echo "You must install xrandr for the shortcuts to work"
  exit 1
fi

function screen_width() {
  setup_screen_dimensions
  multiplier=$1
  if [ "$multiplier" == "" ]; then
    multiplier=1.0
  fi

  to_int $(expr "$SCREEN_WIDTH * $multiplier" | bc)
}

function screen_height() {
  setup_screen_dimensions
  multiplier=$1
  if [ "$multiplier" == "" ]; then
    multiplier=1.0
  fi

  to_int $(echo "$SCREEN_HEIGHT * $multiplier" | bc)
}

function to_int() {
 printf "%0.0f" "$1"
}

function get_active_window_prop() {
  $XDOTOOL getactivewindow getwindowgeometry --shell | grep -oP "(?<=$1=).*"
}

function get_new_width() {
  setup_screen_dimensions
  if [ "$window_width" -gt $(to_int $(screen_width 0.55)) ]; then
    screen_width 0.5
  elif [ $window_width -lt $(to_int $(screen_width 0.45)) ]; then
    screen_width 0.66
  else
    screen_width 0.33
  fi
}

function setup_screen_dimensions() {
  if [ "$SCREEN_DIMENSIONS" == "" ]; then
    # NOTE: assumes that both screen are of the same size
    SCREEN_DIMENSIONS=$($XRANDR --current | grep '*' | grep -Eo "[0-9]+x[0-9]+" | head -1)
    SCREEN_WIDTH=$(echo $SCREEN_DIMENSIONS | cut -d'x' -f1)
    SCREEN_HEIGHT=$(echo $SCREEN_DIMENSIONS | cut -d'x' -f2)
  fi
}

function get_window_y_corrected() {
  curr_y=$(get_active_window_prop Y)
  if [ $curr_y -lt 100 ]; then
    curr_y=0
  fi
}

setup_screen_dimensions
window_width=$(get_active_window_prop WIDTH)
absolute_x=$(get_active_window_prop X)
if [ $absolute_x -ge $SCREEN_WIDTH ]; then
  X_ORIGIN=$SCREEN_WIDTH
  relative_x=$(expr $absolute_x - $X_ORIGIN)
else
  X_ORIGIN=0
  relative_x=$absolute_x
fi

# NOTE: This fixes the issue when moving a window to the edge does not actually
# put it in x=0, because of the window manager
if [ $relative_x -lt 50 ]; then
  relative_x=0
fi

if [ "$1" == "left" ]; then
  if [ $relative_x -gt 50 ]; then
    new_width=$(screen_width 0.5)
  else
    new_width=$(get_new_width)
  fi
  $XDOTOOL getactivewindow windowmove $X_ORIGIN 0 windowsize $new_width $(screen_height)
elif [ "$1" == "right" ]; then
  if [ $relative_x -lt 50 ]; then
    new_width=$(screen_width 0.5)
  else
    new_width=$(get_new_width)
  fi
  new_x=$(expr $X_ORIGIN + $SCREEN_WIDTH - $new_width)
  $XDOTOOL getactivewindow windowsize $new_width $SCREEN_HEIGHT windowmove $new_x 0
elif [ "$1" == "up" ]; then
  $XDOTOOL getactivewindow windowsize $window_width $(screen_height 0.5) windowmove $(expr $X_ORIGIN + $relative_x) 0
elif [ "$1" == "down" ]; then
  half_screen_height=$(screen_height 0.5)
  $XDOTOOL getactivewindow windowsize $window_width $half_screen_height windowmove $(expr $X_ORIGIN + $relative_x) $half_screen_height
elif [ "$1" == "maximize" ]; then
  $XDOTOOL getactivewindow windowmove $X_ORIGIN 0 windowsize $SCREEN_WIDTH $SCREEN_HEIGHT
elif [ "$1" == "minimize" ]; then
  $XDOTOOL getactivewindow windowminimize
elif [ "$1" == "right-screen" ]; then
  # NOTE: Assumes both screens are the same size
  if [ $absolute_x -lt $SCREEN_WIDTH ]; then
    get_window_y_corrected
    $XDOTOOL getactivewindow windowmove $(expr $absolute_x + $SCREEN_WIDTH) $curr_y
  fi
elif [ "$1" == "left-screen" ]; then
  # NOTE: Assumes both screens are the same size
  if [ $absolute_x -ge $SCREEN_WIDTH ]; then
    get_window_y_corrected
    $XDOTOOL getactivewindow windowmove $(expr $absolute_x - $SCREEN_WIDTH) $curr_y
  fi
fi
