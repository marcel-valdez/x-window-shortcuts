#!/usr/bin/env bash

# Set DEBUG to 1 to anything in order to show notification messages
TWO_THIRDS=0.666666666

function log_debug() {
  if [[ "${DEBUG}" != "" ]]; then
    title="x-window-move"
    message="$1"
    if [[ "${TERMINAL_DEBUG}" ]]; then
      echo "${message}" >&2
    else
      notify "${title}" "${message}"
    fi
  fi
}

if [ "$XDOTOOL" == "" ]; then
  XDOTOOL="/usr/bin/xdotool"
fi

if [ ! -f "$XDOTOOL" ]; then
  echo "You must install xdotool for the shortcuts to work"
  exit 1
fi

if [ "$XRANDR" == "" ]; then
  XRANDR="/usr/bin/xrandr"
fi

if [ ! -f "$XRANDR" ]; then
  echo "You must install xrandr for the shortcuts to work"
  exit 1
fi

function get_screen_width() {
  setup_screen_dimensions
  multiplier=$1
  if [ "${multiplier}" == "" ]; then
    multiplier=1.0
  fi

  to_int $(expr "${SCREEN_WIDTH} * ${multiplier}" | bc)
}

function get_screen_height() {
  setup_screen_dimensions
  multiplier=$1
  if [ "${multiplier}" == "" ]; then
    multiplier=1.0
  fi

  to_int $(echo "${SCREEN_HEIGHT} * ${multiplier}" | bc)
}

function to_int() {
  printf "%0.0f" "$1"
}

function get_active_window_prop() {
  ${XDOTOOL} getactivewindow getwindowgeometry --shell | grep -oP "(?<=$1=).*"
}

function get_new_width() {
  setup_screen_dimensions
  if [ ${window_width} -gt $(to_int $(get_screen_width 0.55)) ]; then
    get_screen_width 0.5
  elif [ ${window_width} -lt $(to_int $(get_screen_width 0.45)) ]; then
    get_screen_width ${TWO_THIRDS}
  else
    local two_thirds_width=$(get_screen_width "${TWO_THIRDS}")
    local precise_width=$(expr "${SCREEN_WIDTH} - ${two_thirds_width}" | bc)
    to_int "${precise_width}"
  fi
}

function get_new_height() {
  setup_screen_dimensions
  if [ ${window_height} -gt $(to_int $(get_screen_height 0.55)) ]; then
    get_screen_height 0.5
  elif [ ${window_height} -lt $(to_int $(get_screen_height 0.45)) ]; then
    get_screen_height ${TWO_THIRDS}
  else
    local two_thirds_height=$(get_screen_height "${TWO_THIRDS}")
    local precise_height=$(expr "${SCREEN_HEIGHT} - ${two_thirds_height}" | bc)
    to_int "${precise_height}"
  fi
}


function get_selected_screen_dimensions() {
  selection_char="$1"
  ${XRANDR} --current | grep "${selection_char}" | grep -Eo "[0-9]+\s*x\s*[0-9]+" | head -1
}

function setup_screen_dimensions() {
  if [ "${SCREEN_DIMENSIONS}" == "" ]; then
    # NOTE: assumes that both screen are of the same size
    SCREEN_DIMENSIONS=$(get_selected_screen_dimensions '*')
    # RATIONALE: If the current size is not shown as selected by an '*', then
    # use the size that is selected by a '+'.
    if [[ "${SCREEN_DIMENSIONS}" == "" ]]; then
      SCREEN_DIMENSIONS=$(get_selected_screen_dimensions '+')
    fi
    log_debug "setup_screen_dimensions: ${SCREEN_DIMENSIONS}"
    SCREEN_WIDTH=$(echo ${SCREEN_DIMENSIONS} | cut -d'x' -f1)
    SCREEN_HEIGHT=$(echo ${SCREEN_DIMENSIONS} | cut -d'x' -f2)
    log_debug "setup_screen_dimensions: screen width: ${SCREEN_WIDTH}, screen height: ${SCREEN_HEIGHT}"
  fi
}

function get_window_y_corrected() {
  curr_y=$(get_active_window_prop Y)
  if [ $curr_y -lt 100 ]; then
    curr_y=0
  fi
}

setup_screen_dimensions
window_width=$(get_active_window_prop "WIDTH")
window_height=$(get_active_window_prop "HEIGHT")
absolute_x=$(get_active_window_prop X)
if [ ${absolute_x} -ge ${SCREEN_WIDTH} ]; then
  X_ORIGIN=${SCREEN_WIDTH}
  relative_x=$(expr ${absolute_x} - ${X_ORIGIN})
else
  X_ORIGIN=0
  relative_x=${absolute_x}
fi

# NOTE: This fixes the issue when moving a window to the edge does not actually
# put it in x=0, because of the window manager
if [ ${relative_x} -lt 50 ]; then
  relative_x=0
fi

case $1 in
  left)
    if [ ${relative_x} -gt 50 ]; then
      new_width=$(get_screen_width 0.5)
    else
      new_width=$(get_new_width)
    fi

    log_debug "move left width: ${new_width} height: ${SCREEN_HEIGHT} x: ${new_x} y: 0"
    ${XDOTOOL} getactivewindow windowmove ${X_ORIGIN} 0\
      windowsize ${new_width} $(get_screen_height)
    ;;

  right)
    if [ ${relative_x} -lt 50 ]; then
      new_width=$(get_screen_width 0.5)
    else
      new_width=$(get_new_width)
    fi
    new_x=$(expr ${X_ORIGIN} + ${SCREEN_WIDTH} - ${new_width})
    log_debug "move right width: ${new_width} height: ${SCREEN_HEIGHT} x: ${new_x} y: 0"
    ${XDOTOOL} getactivewindow windowsize ${new_width} ${SCREEN_HEIGHT}\
      windowmove ${new_x} 0
    ;;

  up)
    new_height=$(get_new_height)
    ${XDOTOOL} getactivewindow windowsize ${window_width} ${new_height}\
      windowmove $(expr ${X_ORIGIN} + ${relative_x}) 0
    ;;

  down)
    new_height=$(get_new_height)
    new_y=$(expr $(get_screen_height) - ${new_height})
    ${XDOTOOL} getactivewindow windowsize ${window_width} ${new_height}\
      windowmove $(expr ${X_ORIGIN} + ${relative_x}) ${new_y}
    ;;

  maximize)
    ${XDOTOOL} getactivewindow windowmove ${X_ORIGIN} 0\
      windowsize ${SCREEN_WIDTH} ${SCREEN_HEIGHT}
    ;;

  minimize)
    ${XDOTOOL} getactivewindow windowminimize
    ;;

  right-screen)
    # NOTE: Assumes both screens are the same size
    if [ ${absolute_x} -lt ${SCREEN_WIDTH} ]; then
      get_window_y_corrected
      ${XDOTOOL} getactivewindow\
        windowmove $(expr ${absolute_x} + ${SCREEN_WIDTH}) ${curr_y}
    fi
    ;;

  left-screen)
    # NOTE: Assumes both screens are the same size
    if [ ${absolute_x} -ge ${SCREEN_WIDTH} ]; then
      get_window_y_corrected
      ${XDOTOOL} getactivewindow\
        windowmove $(expr ${absolute_x} - ${SCREEN_WIDTH}) ${curr_y}
    fi
    ;;
esac
